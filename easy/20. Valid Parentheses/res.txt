time : 9:34 - 


1st try : 
class Solution:
    def isValid(self, s: str) -> bool:
        for i in range(len(s)):
            try:
                if s[i] =="(":
                    if s[i+1] !=  ")":
                        return False
                if s[i] =="[":
                    if s[i+1] !=  "]":
                        return False
                if s[i] =="{":
                    if s[i+1] !=  "}":
                        return False
                
                
                        
            except:
                return False
        return True

2nd try:

class Solution:
    def isValid(self, s: str) -> bool:
        p_o = 0
        k_o = 0
        c_o = 0
        p_c = 0
        k_c = 0
        c_c = 0

        for i in s:
            if i == "(":
                p_o +=1
            elif i == ")":
                p_c +=1
            elif i == "[":
                c_o +=1
            elif i == "]":
                c_c +=1
            elif i == "{":
                k_o +=1
            elif i == "}":
                k_c +=1

        if p_o == p_c and c_o == c_c and k_o == k_c :
            return True
        else:
            return False

3rd try:

class Solution:
    def isValid(self,s: str) -> bool:

        def is_all_close(start_index,end_index):
            p_o = 0
            k_o = 0
            c_o = 0
            p_c = 0
            k_c = 0
            c_c = 0



            for i in range(start_index,end_index+1):

                if s[i] == "(":
                    p_o +=1
                elif s[i] == ")":
                    p_c +=1
                elif s[i] == "[":
                    c_o +=1
                elif s[i] == "]":
                    c_c +=1
                elif s[i] == "{":
                    k_o +=1
                elif s[i] == "}":
                    k_c +=1


            if p_o == p_c and c_o == c_c and k_o == k_c :
                return True
            else:
                return False


        qnt_open_p = 0
        qnt_open_c = 0
        qnt_open_k = 0
        qnt_close_p = 0
        qnt_close_c = 0
        qnt_close_k = 0



        p_o = 0
        k_o = 0
        c_o = 0
        p_c = 0
        k_c = 0
        c_c = 0

        for i in s:
            if i == "(":
                p_o +=1
            elif i == ")":
                p_c +=1
            elif i == "[":
                c_o +=1
            elif i == "]":
                c_c +=1
            elif i == "{":
                k_o +=1
            elif i == "}":
                k_c +=1

        if p_o == p_c and c_o == c_c and k_o == k_c :
            pass
        else:
            return False








        for i in range(len(s)):
            found = False
            if s[i] == "(":
                qnt_open_p +=1
                for j in range(i+1,len(s)):
                    if s[j] == "(":
                        qnt_open_p +=1
                    elif s[j] == ")":

                        qnt_close_p +=1

                    if qnt_open_p == qnt_close_p:

                        valid = is_all_close(i,j)
                        if valid == False:
                            return False
                        else:
                            qnt_open_p = 0
                            qnt_close_p = 0
                            break
                if qnt_open_p != qnt_close_p:
                    return False

            elif s[i] == "[":
                qnt_open_c +=1
                for j in range(i+1,len(s)):
                    if s[j] == "[":
                        qnt_open_c +=1
                    elif s[j] == "]":
                        qnt_close_c +=1

                    if qnt_open_c == qnt_close_c:

                        valid = is_all_close(i,j)
                        if valid == False:
                            return False

                        else:
                            qnt_open_c = 0
                            qnt_close_c = 0
                            break
                if qnt_open_c != qnt_close_c:
                    return False


            elif s[i] == "{":
                qnt_open_k +=1
                for j in range(i+1,len(s)):
                    if s[j] == "{":
                        qnt_open_k +=1
                    elif s[j] == "}":
                        qnt_close_k +=1

                    if qnt_open_k == qnt_close_k:

                        valid = is_all_close(i,j)
                        if valid == False:
                            return False
                        else:
                            qnt_open_k = 0
                            qnt_close_k = 0
                            break
                if qnt_open_k != qnt_close_k:
                    return False

            qnt_open_p = 0
            qnt_open_c = 0
            qnt_open_k = 0
            qnt_close_p = 0
            qnt_close_c = 0
            qnt_close_k = 0
        return True

